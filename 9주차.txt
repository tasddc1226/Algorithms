> 탐욕 기법 알고리즘
coinChange(d[], m, n){
// 거스름돈에 포함되는 동전들의 수를 최소화함.
// 입력 : m - 액면가가 다른 동전들의 수
//         d[1..m] - 동전들의 액면가를 저장하는 배열로 d[1]이 가장 크고 d[m] = 1이다.
//         n - 거스름돈
// 출력(반환값) : 거스름돈에 포함된 동전들의 최소 개수
1  count = 0
2  i = 0
3  whlie( n > 0 & i <= m ) { // 거스름돈이 남아있고 선택할 수 있는 동전이 존재한다면 반복
4     count = count + n / d[i] // 가치가 가장 큰 동전들을 최대한 많이 선택
5     n = n mod d[i] // 남은 거스름돈 계산
6     i++ // 다음으로 가치가 큰 동전을 선택
   }
   return count
}

입력의 크기 : m (액면가가 다른 동전들의 수)
기본 연산 : count = count + n / d[i]
기본 연산의 수행 횟수 : 최대 m
시간 복잡도 : m = O(m)
--------------------------------------------
정점 지향 전략 : 프림 알고리즘
용어
- 적색 정점 : 처음에 선택된 정점 v0와 합쳐진 정점
- 청색 정점 : 그 외 다른 정점.
아이디어
다음을 n-1번 반복한다:
1. 한 적색 정점과 한 청색 정점을 연결하는 가장 가중치가 작은 간선을 선택한다.
2. 선택된 간선의 청색 정점을 적새으로 바꾸고 그 간선을 트리에 추가한다.
그래프의 표현 : 비용 행렬 W

R : 적색 정점들의 집합
B : 청색 정점들의 집합
V : 그래프 내의 모든 정점들의 집합
T : 트리 내에 포함되는 간선들의 집합
알고리즘
1 R = {v0} // 임의로 한 정점 v0를 선택한다.
2 B = V - {v0}
3 T = {0} (공집합)
4 for (i = i; i < n; i++){
5	w[r,b]가 최소인 r과 b를 선택한다.
6	T = T U {(r,b)} // 간선 (r,b)를 트리에 추가함.
7	B = B - {b}
8	R = R U {b} // 정점 b를 적색으로 바꾼다.
  }

기본연산 : 5번 실행문
시간복잡도 : O(n^3)
이 알고리즘은 중복 계산을 많이한다. 매번 반복할때마다 최소 간선을
거의 같은 집합에서 찾음.
따라서 적색 정점의 관점에서 말고
청색 정점의 관점을 취해야 한다.
단순히 어느 적색 정점이 자신에서 가장 가까운지만 기억한다.
이는 한 정점이 적색이 될 때 쉽게 갱신될 수 있다.

개선된 프림 알고리즘
near[0..n-1] : 각 청색 정점에 가장 가까운 적색 정점을 저장하는 배열
isblue[0..n-1] : 각 정점이 청색이면 true를 아니면 false를 저장하는 배열
isblue[0] = false // 정점 0은 적색
T = {0} (공집합)
for (i=1 ; i<n; i++){
  isblue[i] = true // 다른 정점들은 청색이다.
  near[i] = 0 // 가장 가까운 적색 정점은 0이다.
}
for (i=1; i<n; i++){
  minval = INF
  for (b=0; b<n; b++){ // 적색 정점들에 가장 가까운 청색 정점을 찾음
    if (isblue[b] && W[b, near[b] < minval) { <- 기본연산
      minval = W[b, near[b]]
      newred = b
    }
  isblue[newred] = false // 정점 newred를 적색으로 바꾼다.
  T = T U { (newred, near[newred]) } // 가장 가중치가 작은 간선을 T에 추가한다.
  for (b=0; b<n; b++){
    if (isblue[b] && W[b,newred] < W[b, near[b]]) near[b] = newred
  }
}

입력 크기 : n (정점들의 수)
기본 연산 : isblue의 요소들에 대한 참조 횟수
참조 횟수
- 각 i, 1 <= i < n,에 대하여 항상 이다.
- 따라서 총 참조 횟수 = (n-1) * n 
시간복잡도 O(n^2)




